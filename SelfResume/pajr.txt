1、web性能的优化方案
   涉及到例如css和js的合并压缩的原理
2、ajax的实现原理
   xmlHttpRequest的lv2级别
     Lv2指的是xmlHttpRequest新增了许多API方法弥补老版的功能不足
     	a、可以设置Http请求的时限（xhr.timeout、xhr.ontimeout）
     	b、可以使用FormData对象管理（可以新建一个form表单，post）
	c、可以上传文件。
	d、可以请求不同域名下的数据（跨域请求）。
	e、可以获取服务器端的二进制数据。
	f、可以获得数据传输的进度信息。（传送数据的时候，有一个progress事件，用来返回进度信息。）

      状态码的意义
	0: xmlHttpRequest对象创建
	1: Open 2: Send 3:Receving 4: Loaded
=============	
	100: 服务端已接收到请求,客户端需继续发送
	2xx: 成功
	3xx: 重定向
	404: 
	5xx: 服务端错误
3、es5、es6的一些新特性

4、浏览器对于图片、js、css请求，多线程、速率（偏原理）
5、项目介绍+自我介绍
6、实现框架UI封装，跟调用方的配合。



7、一个数组，算法出逆向排序
var s = [1,2,3,4,5]
方法1:	
s.concat().concat((s.reverse().shift(),s));
方法2:
for (var l = s.length - 2, i = l; i >= 0; i--) { s.push(s[i]); }

8、斐波那契，加入缓存变量后怎么输出
	//normal
	function fibonacci(n) {
		if (1 == n || 2 == n) return 1;
		return fibonacci(n - 1) + fibonacci(n - 2);
	}
	//斐波那契加入缓存高性能做法
	function fibonacci(n) {
		var memo = [0, 1];
		var fib = function(n) {
			var result = memo[n];
			if (typeof result !== 'number') {
				result = fib(n-1) + fib(n-2)；
				memo[n] = result;
			}
			return result;
		}
		return fib(n);
	}